%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
服务器DEVICE接口文档
server DEVICE interface
（时间）
(维护者）
(/server/device/device_interface.h)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

################################################################################
宏定义（MACRO）
################################################################################
参数ID定义
//control
#define		DEVICE_CTRL_SD_INFO					0x0001
#define		DEVICE_CTRL_LED						0x0003
#define		DEVICE_CTRL_AMPLIFIER				0x0009
#define		DEVICE_CTRL_ADJUST_AUDIO_VOLUME		0x000a
#define		DEVICE_CTRL_PART_INFO				0x000c
#define		DEVICE_CTRL_PART_USER_INFO			0x000d
#define 	DEVICE_CTRL_DAY_NIGHT_MODE			0x0008
#define  	DEVICE_CTRL_MOTOR_HOR_RIGHT			0x000b
#define  	DEVICE_CTRL_MOTOR_HOR_LEFT			0x000f
#define 	DEVICE_CTRL_MOTOR_VER_UP			0x0011
#define 	DEVICE_CTRL_MOTOR_VER_DOWN			0x0012
#define 	DEVICE_CTRL_MOTOR_RESET				0x0013

//#define		DEVICE_CTRL_NET_MAC						0x0021
//#define		DEVICE_CTRL_NET_IP						0x0022
//#define		DEVICE_CTRL_NET_NETMASK					0x0023
//#define 	DEVICE_CTRL_NET_GATEWAY	    			0x0024
//#define 	DEVICE_CTRL_WIFI_STATUS		 			0x0030
//#define		DEVICE_CTRL_WIFI_NAME					0x0031
//#define		DEVICE_CTRL_WIFI_RSSI					0x0032
//#define 	DEVICE_CTRL_MOTOR_HOR_STATUS          	0x0050
//#define 	DEVICE_CTRL_MOTOR_HOR_POS	          	0x0051
//#define 	DEVICE_CTRL_MOTOR_HOR_SPEED          	0x0052
//#define 	DEVICE_CTRL_MOTOR_VER_STATUS		    0x0053
//#define 	DEVICE_CTRL_MOTOR_VER_POS	          	0x0054
//#define 	DEVICE_CTRL_MOTOR_VER_SPEED          	0x0055

动作ID定义
#define		DEVICE_ACTION_USER_FORMAT			0x000e
#define		DEVICE_ACTION_SD_FORMAT				0x0002

################################################################################
数据结构（STRUCT）
################################################################################
IOT参数结构体：提供给其他服务器的统一参数接口
typedef struct video_iot_config_t {
	int day_night_mode;
	int led1_onoff;
	int led2_onoff;
	int on_off;
	sd_info_ack_t 		sd_iot_info;
	sd_info_ack_t 		user_part_iot_info;
	audio_info_t 		audio_iot_info;
	part_msg_info_t		part_iot_info;
} device_iot_config_t;

其他相关结构体：
1）查询设备flash信息使用
/*
 * name：分区名
 * size：分区大小
 */
typedef struct part_info
{
    char name[16];
    unsigned int size;  //KB in units
}part_info_t;

/*
 * part_num：分区数量
 * part_info_sum：各个分区的信息
 */
typedef struct part_msg_info
{
    int part_num;
    part_info_t part_info_sum[10];
}part_msg_info_t;

2）查询设备sd信息使用
/*
 * plug：是否插入
 * totalBytes：总大小
 * usedBytes：已使用大小
 * freeBytes：剩余大小
 */
typedef struct sd_info_ack_t {
	unsigned long	plug;
	unsigned long	totalBytes;  	//KB in units
	unsigned long	usedBytes;		//KB in units
	unsigned long	freeBytes;		//KB in units
} sd_info_ack_t;

3）调节设备音量时使用
/* if type  > 0,  volume must be -1;
 * if volume > 0,  event must be 0;
 *
 * int_out : control mic volume or speaker volume
 * 			 0 -> mic
 * 			 1 -> speaker
 *
 * type:  0 -> no event, control by volume
 * 		  1 -> volume up
 * 		  2 -> volume down
 * 		  3 -> voulme mute
 * 		  4 -> volume unmute
 * volume: -1 -> no volume, control by event
 * 		   >= 0 && <= 100 -> set volume (range 0 ~ 100)
 */
typedef struct audio_info_t {
	unsigned int 	in_out;
	unsigned int 	type;
	unsigned int	volume;
} audio_info_t

################################################################################
消息（MESSAGE）
################################################################################
#define		MSG_DEVICE_BASE						(SERVER_DEVICE<<16)
#define		MSG_DEVICE_SIGINT					MSG_DEVICE_BASE | 0x0000
#define		MSG_DEVICE_SIGINT_ACK				MSG_DEVICE_BASE | 0x1000
#define		MSG_DEVICE_GET_PARA					MSG_DEVICE_BASE | 0x0010
#define		MSG_DEVICE_GET_PARA_ACK				MSG_DEVICE_BASE | 0x1010
#define		MSG_DEVICE_SET_PARA					MSG_DEVICE_BASE | 0x0011
#define		MSG_DEVICE_SET_PARA_ACK				MSG_DEVICE_BASE | 0x1011
#define		MSG_DEVICE_CTRL_DIRECT				MSG_DEVICE_BASE | 0x0012
#define		MSG_DEVICE_CTRL_DIRECT_ACK			MSG_DEVICE_BASE | 0x1012
#define		MSG_DEVICE_ACTION					MSG_DEVICE_BASE | 0x0020
#define		MSG_DEVICE_ACTION_ACK				MSG_DEVICE_BASE | 0x1020
--------------------------------------------------------------------------------
		MSG_DEVICE_SIGINT
消息说明：		服务器发送SIGINT系统响应到MANAGER
发送服务器：		DEVICE
接受服务器：		MANAGER
传入参数：		无
返回消息：		无
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
		MSG_DEVICE_GET_PARA
消息说明：		从DEVICE服务器获取IOT参数
发送服务器：		MIIO,MISS,VIDEO
接受服务器：		DEVICE
传入参数：
	arg_pass:	message_arg_t			回传参数
返回消息：		必须
		MSG_DEVICE_GET_PARA_ACK
传回参数：
	result:		int						0:成功，其他失败
	arg_pass:	message_arg_t			回传参数，原样拷贝
	arg:		*device_iot_config_t	结构指针
	arg_size:	int						arg结构大小
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
		MSG_DEVICE_CTRL_DIRECT
消息说明：		通过IOT结构体，控制device工作，控制相关硬件信息
发送服务器：		MIIO,MISS,
接受服务器：		DEVICE
传入参数：
	arg_in:		message_arg_t				传入参数
		cat:	int							需要控制的硬件类型（参照上面的参数宏）（必须）
	arg:		*device_iot_config_t		结构指针（参照device_iot_config_t，存放硬件控制的相关信息）（必须）
	arg_size:	int							需要配置的参数的值的大小
	arg_pass:	message_arg_t				回传参数
返回消息：		必须
		MSG_DEVICE_CTRL_DIRECT_ACK
传回参数：
	result:		int						0:成功，其他失败
	arg_pass:	message_arg_t			回传参数，原样拷贝
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
		MSG_DEVICE_ACTION
消息说明：		运行命令
发送服务器：		MIIO,MISS,
接受服务器：		DEVICE
传入参数：
	arg_pass:	message_arg_t			回传参数
	arg_in:		message_arg_t			传入参数
		cat:	int						执行命令的ID
返回消息：		必须
		MSG_DEVICE_ACTION_ACK
传回参数：
	result:		int						0:成功，其他失败
	arg_pass:	message_arg_t			回传参数，原样拷贝
--------------------------------------------------------------------------------